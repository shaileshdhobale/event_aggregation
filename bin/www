#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app.js');
var http = require('http');
var fs = require('fs');

// Internal Dependencies
var config = require("../config/config");
var envConfig = config.environmentConfig();

/**
 * Get port from environment and store in Express.
 */

var appPort = envConfig.port;


var port = normalizePort(process.env.PORT || appPort || '8091');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.info("Event Aggregation server running on port: " + port + " and running on: " + config.environmentType() + " environment");
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        console.error(JSON.stringify(error));
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            console.error(error);
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = port;
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + port;
}

//Used while sticky session is on
process.on('uncaughtException', function(err) {
    console.error('whoops! There was an uncaught error: ' +  err.code);
    if (err.syscall !== 'listen') {
        console.error(JSON.stringify(err));
        throw err;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (err.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            console.error(err);
            throw err;
    }
    // do a graceful shutdown,
    // close the database connection etc.
    process.exit(1);

});


